# Команда import s3 стартует на стороне сервера процесс загрузки из S3-совместимого хранилища данных
# и информации об объектах схемы данных
from include.s3 import S3
# из модуля для работы с операционной системой импортируем функцию, которая
# дает нам возможность для итерации на корневом уровне пути
from os import walk
# из модуля, позволяющего работать с файлами их путями в ООП-парадигме импортируем основной класс
from pathlib import Path
# Из библиотеки для работы с переменным окружением импортируем функцию, позволяющую поиск файла формата env.
# И загружающее их в переменное окружение
from dotenv import load_dotenv
# из библиотеки для кода планирования импортируем необходимые атрибуты, чтобы код по плану выполнялся определенное
# кол-во раз и в определенное время
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
# импортируем модуль для получения локального времени в данный момент
import datetime as dt
# импортируем модуль для работы с регулярными выражениями
import re
# импортируем модуль для работы с операционной системой
import os
# импортируем модуль, позволяющий взаимодействовать с некоторыми перемененными и функциями, взаимодействующими с
# интерпретатором
import sys

# загружаем файлы формата .env в переменное окружение
load_dotenv()
# создаем переменную и присваиваем ей единицу
MIN_VIDEO_AGE = 1
# создаем экземпляр класса
s3 = S3()


# создаем функцию, принимающую в качестве аргумента путь к файлу, по умолчанию этот файл-папка
def get_dir_items(path, is_folders = True):
    # возвращаем список файлов этого пути, если это папка
    return next(walk(path), (None, None, []))[1 if is_folders else 2]


# функция, принимающая в качестве аргумента корневой путь
def get_files_list_to_upload(root_path):
    # создаем пустой список
    files_to_upload = []
    # возвращаем список файлов папки, путь к которой мы указали
    cameras_folders = get_dir_items(root_path, True)
    # в новую переменную сокращаем название каждого файла в папке и записываем урезанную строку, начиная с 7 индекса
    for cameras_folder in cameras_folders:
        camera_id = cameras_folder[7:]

        # создаем переменную содержащую в себе список из файлов 2 уровня папок, находящихся в корневой папке
        videos_list = get_dir_items(root_path + cameras_folder, False)
        for video_file in videos_list:
            # создает список из элементов в соответствии с указанным паттерном
            result = re.findall(r'\d{1,2}_\d{1,2}_\d{4}', video_file)
            # проверка, является ли элемент этого списка объектом, длина которого больше 0
            date = result[0] if len(result) > 0 else False
            # если нет, то продолжаем итерацию списка
            if not date:
                continue

            # записываем в переменную дату в специальном формате, указанном в качестве доп аргумента
            # (день_месяц_год), имя этого файла в сокр.
            date = dt.datetime.strptime(date, '%d_%m_%Y')
            date = date.date()
            # в переменную записываем возраст этого файла в днях
            video_age = (dt.datetime.today().date() - date).days
            # если возраст меньше 1, то продолжаем
            if video_age < MIN_VIDEO_AGE:
                continue

            # элементу заранее созданному файлу добавляем соответсвующий словарь
            files_to_upload.append({
                "filename": video_file,
                "camera_id": camera_id,
                "date": date,
                "path": root_path + cameras_folder + os.sep + video_file
            })
    # возвращаем этот список
    return files_to_upload


# создаем функцию, принимающую в качестве аргумента видео
def upload_video_to_s3(video):
    # используя переменное окружение и получив доступ к соответствующей переменной, присвоим переменной корзина значение
    # переменной из переменного окружения
    bucket = os.getenv('YANDEX_S3_BUCKET')
    # присвоить переменной соотв значение, используя конкатенация строк
    key = "videos/camera_"+video['camera_id']+"/"+video['filename']
    # загружаем соответствующий файл в s3
    s3.upload_file(bucket, key, video['path'])

    # удаляем соответствующий файл из операционной системы, чтобы не засорять систему
    os.remove(video['path'])

# Создание функции, которая не принимает никаких аргументов
def start_uploading():
    # переменной присвоим содержание списка используя выше описанную функцию и передав в качестве аргумента путь к
    # корневому файлу
    files_to_upload = get_files_list_to_upload("/app/media/full/")
    # далее будем выгружать все видео, удовлетворяющие этому условию в s3
    for file_to_upload in files_to_upload:
        upload_video_to_s3(file_to_upload)

# если длина списка, который нам выведен, используя специальный модуль для взаимодействия с функциями и переменными
# интерпретатора, а также указанием некоторых аргументов командной строке больше двух, и второй элемент списка это
# (--force), то загружаем этот файл в s3
if len(sys.argv) >= 2 and sys.argv[1] == '--force':
    print('force upload videos to Yandex S3')
    start_uploading()
# Если нет, то выполняю план выполнения этого кода в соответствии с указанными ниже условиями
else:
    print('Scheduler started')
    scheduler = BlockingScheduler()
    scheduler.add_job(
        start_uploading,
        CronTrigger.from_crontab('0 1 * * *')
    )
    scheduler.start()
